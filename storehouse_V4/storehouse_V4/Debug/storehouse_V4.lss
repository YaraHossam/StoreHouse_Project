
AVRASM ver. 2.2.6  D:\Atmle Pro\storehouse_V4\storehouse_V4\main.asm Wed Dec 20 17:16:05 2017

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.1.130\avrasm\inc\m32def.inc'
D:\Atmle Pro\storehouse_V4\storehouse_V4\main.asm(10): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.1.130\avrasm\inc\M32DEF.INC'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.1.130\avrasm\inc\m32def.inc'
D:\Atmle Pro\storehouse_V4\storehouse_V4\main.asm(10): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.1.130\avrasm\inc\M32DEF.INC'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32.xml ************
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m32def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega32
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega32
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M32DEF_INC_
                                 #define _M32DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega32
                                 #pragma AVRPART ADMIN PART_NAME ATmega32
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x02
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	OCR0	= 0x3c
                                 .equ	GICR	= 0x3b
                                 .equ	GIFR	= 0x3a
                                 .equ	TIMSK	= 0x39
                                 .equ	TIFR	= 0x38
                                 .equ	SPMCR	= 0x37
                                 .equ	TWCR	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUCSR	= 0x34
                                 .equ	TCCR0	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OSCCAL	= 0x31
                                 .equ	OCDR	= 0x31
                                 .equ	SFIOR	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	ICR1L	= 0x26
                                 .equ	ICR1H	= 0x27
                                 .equ	TCCR2	= 0x25
                                 .equ	TCNT2	= 0x24
                                 .equ	OCR2	= 0x23
                                 .equ	ASSR	= 0x22
                                 .equ	WDTCR	= 0x21
                                 .equ	UBRRH	= 0x20
                                 .equ	UCSRC	= 0x20
                                 .equ	EEARL	= 0x1e
                                 .equ	EEARH	= 0x1f
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTA	= 0x1b
                                 .equ	DDRA	= 0x1a
                                 .equ	PINA	= 0x19
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PORTC	= 0x15
                                 .equ	DDRC	= 0x14
                                 .equ	PINC	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	SPDR	= 0x0f
                                 .equ	SPSR	= 0x0e
                                 .equ	SPCR	= 0x0d
                                 .equ	UDR	= 0x0c
                                 .equ	UCSRA	= 0x0b
                                 .equ	UCSRB	= 0x0a
                                 .equ	UBRRL	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	ADMUX	= 0x07
                                 .equ	ADCSRA	= 0x06
                                 .equ	ADCH	= 0x05
                                 .equ	ADCL	= 0x04
                                 .equ	TWDR	= 0x03
                                 .equ	TWAR	= 0x02
                                 .equ	TWSR	= 0x01
                                 .equ	TWBR	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEWE	= 1	; EEPROM Write Enable
                                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDTOE	= 4	; RW
                                 .equ	WDDE	= WDTOE	; For compatibility
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; GICR - General Interrupt Control Register
                                 .equ	GIMSK	= GICR	; For compatibility
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	INT2	= 5	; External Interrupt Request 2 Enable
                                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                                 
                                 ; GIFR - General Interrupt Flag Register
                                 .equ	INTF2	= 5	; External Interrupt Flag 2
                                 .equ	INTF0	= 6	; External Interrupt Flag 0
                                 .equ	INTF1	= 7	; External Interrupt Flag 1
                                 
                                 ; MCUCR - General Interrupt Control Register
                                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	ISC2	= 6	; Interrupt Sense Control 2
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TCCR0 - Timer/Counter Control Register
                                 .equ	CS00	= 0	; Clock Select 1
                                 .equ	CS01	= 1	; Clock Select 1
                                 .equ	CS02	= 2	; Clock Select 2
                                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                                 .equ	CTC0	= WGM01	; For compatibility
                                 .equ	COM00	= 4	; Compare match Output Mode 0
                                 .equ	COM01	= 5	; Compare Match Output Mode 1
                                 .equ	WGM00	= 6	; Waveform Generation Mode
                                 .equ	PWM0	= WGM00	; For compatibility
                                 .equ	FOC0	= 7	; Force Output Compare
                                 
                                 ; TCNT0 - Timer/Counter Register
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0 - Output Compare Register
                                 .equ	OCR0_0	= 0	; 
                                 .equ	OCR0_1	= 1	; 
                                 .equ	OCR0_2	= 2	; 
                                 .equ	OCR0_3	= 3	; 
                                 .equ	OCR0_4	= 4	; 
                                 .equ	OCR0_5	= 5	; 
                                 .equ	OCR0_6	= 6	; 
                                 .equ	OCR0_7	= 7	; 
                                 
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0	= 1	; Output Compare Flag 0
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2	= 7	; Output Compare Flag 2
                                 
                                 ; TCCR2 - Timer/Counter2 Control Register
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM21	= 3	; Clear Timer/Counter2 on Compare Match
                                 .equ	CTC2	= WGM21	; For compatibility
                                 .equ	COM20	= 4	; Compare Output Mode bit 0
                                 .equ	COM21	= 5	; Compare Output Mode bit 1
                                 .equ	WGM20	= 6	; Pulse Width Modulator Enable
                                 .equ	PWM2	= WGM20	; For compatibility
                                 .equ	FOC2	= 7	; Force Output Compare
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2 - Timer/Counter2 Output Compare Register
                                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	FOC1B	= 2	; Force Output Compare 1B
                                 .equ	FOC1A	= 3	; Force Output Compare 1A
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	CTC10	= WGM12	; For compatibility
                                 .equ	CTC1	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	CTC11	= WGM13	; For compatibility
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** USART ************************
                                 ; UDR - USART I/O Data Register
                                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSRA - USART Control and Status Register A
                                 .equ	USR	= UCSRA	; For compatibility
                                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                                 .equ	U2X	= 1	; Double the USART transmission speed
                                 .equ	UPE	= 2	; Parity Error
                                 .equ	PE	= UPE	; For compatibility
                                 .equ	DOR	= 3	; Data overRun
                                 .equ	FE	= 4	; Framing Error
                                 .equ	UDRE	= 5	; USART Data Register Empty
                                 .equ	TXC	= 6	; USART Transmitt Complete
                                 .equ	RXC	= 7	; USART Receive Complete
                                 
                                 ; UCSRB - USART Control and Status Register B
                                 .equ	UCR	= UCSRB	; For compatibility
                                 .equ	TXB8	= 0	; Transmit Data Bit 8
                                 .equ	RXB8	= 1	; Receive Data Bit 8
                                 .equ	UCSZ2	= 2	; Character Size
                                 .equ	CHR9	= UCSZ2	; For compatibility
                                 .equ	TXEN	= 3	; Transmitter Enable
                                 .equ	RXEN	= 4	; Receiver Enable
                                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSRC - USART Control and Status Register C
                                 .equ	UCPOL	= 0	; Clock Polarity
                                 .equ	UCSZ0	= 1	; Character Size
                                 .equ	UCSZ1	= 2	; Character Size
                                 .equ	USBS	= 3	; Stop Bit Select
                                 .equ	UPM0	= 4	; Parity Mode Bit 0
                                 .equ	UPM1	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL	= 6	; USART Mode Select
                                 .equ	URSEL	= 7	; Register Select
                                 
                                 .equ	UBRRHI	= UBRRH	; For compatibility
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; SFIOR - Special Function IO Register
                                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADCSR	= ADCSRA	; For compatibility
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; When this bit is written to one,the Timer/Counter2 prescaler will be reset.The bit will be cleared by hardware after the operation is performed.Writing a zero to this bit will have no effect.This bit will always be read as zero if Timer/C                                 ounter2 is clocked by the internal CPU clock.If this bit is written when Timer/Counter2 is operating in asynchronous mode,the bit will remain one until the prescaler has been reset.
                                 .equ	ADFR	= ADATE	; For compatibility
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	ADTS0	= 5	; ADC Auto Trigger Source 0
                                 .equ	ADTS1	= 6	; ADC Auto Trigger Source 1
                                 .equ	ADTS2	= 7	; ADC Auto Trigger Source 2
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 .equ	SM0	= 4	; Sleep Mode Select
                                 .equ	SM1	= 5	; Sleep Mode Select
                                 .equ	SM2	= 6	; Sleep Mode Select
                                 .equ	SE	= 7	; Sleep Enable
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	MCUSR	= MCUCSR	; For compatibility
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1&0
                                 .equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PUD	= 2	; Pull-up Disable
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write secion read enable
                                 .equ	ASRE	= RWWSRE	; For compatibility
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	ASB	= RWWSB	; For compatibility
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler bits
                                 .equ	TWPS1	= 1	; TWI Prescaler bits
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	BODEN	= 6	; Brown out detector enable
                                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x003f
                                 .equ	SRAM_START	= 0x0060
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x085f
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	OC2addr	= 0x0008	; Timer/Counter2 Compare Match
                                 .equ	OVF2addr	= 0x000a	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x000c	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x000e	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0010	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x0012	; Timer/Counter1 Overflow
                                 .equ	OC0addr	= 0x0014	; Timer/Counter0 Compare Match
                                 .equ	OVF0addr	= 0x0016	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0018	; Serial Transfer Complete
                                 .equ	URXCaddr	= 0x001a	; USART, Rx Complete
                                 .equ	UDREaddr	= 0x001c	; USART Data Register Empty
                                 .equ	UTXCaddr	= 0x001e	; USART, Tx Complete
                                 .equ	ADCCaddr	= 0x0020	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x0022	; EEPROM Ready
                                 .equ	ACIaddr	= 0x0024	; Analog Comparator
                                 .equ	TWIaddr	= 0x0026	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0028	; Store Program Memory Ready
                                 
                                 .equ	INT_VECTORS_SIZE	= 42	; size in words
                                 
                                 #endif  /* _M32DEF_INC_ */
                                 
                                 
                                 ; storehouse_V4.asm
                                 ;
                                 ; Created: 18/12/2017 09:57:40 م
                                 ; Author : Yara
                                 ;
                                 
                                 
                                 ; Replace with your application code
                                 .INCLUDE "M32DEF.INC"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32.xml ************
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m32def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega32
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega32
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M32DEF_INC_
                                 
                                 #endif  /* _M32DEF_INC_ */
                                 
                                 
                                 
                                 .ORG 0x00
                                 
                                 .EQU LCD_RSPin = 0
                                 .EQU LCD_RWPin = 1
                                 .EQU LCD_EnablePin = 2
                                 
                                 .EQU Port_Data_PORT = PORTB  ;i use all of pins in port 0,1,2,3,4,5,6,7
                                 .EQU Port_Data_DDR = DDRB 
                                 .EQU Port_Control_PORT  = PORTA  ; pins 0,1,2
                                 .EQU Port_Control_DDR = DDRA
                                 
                                 .EQU KEY_PORT=PORTD
                                 .EQU KEY_PIN=PIND
                                 .EQU KEY_DDR=DDRD
                                 
                                 .EQU Port_7segment_PORT = PORTC  ;i use all of pins in port 0,1,2,3,4,5,6
                                 .EQU Port_7segment_DDR = DDRC
                                 
                                 .EQU Port_LED_M_B = PORTA
                                 .EQU DDR_LED_M_B = DDRA
                                 
000000 e058                      LDI R21,HIGH(RAMEND)
000001 bf5e                      OUT SPH,R21
000002 e55f                      LDI R21,LOW(RAMEND)
000003 bf5d                      OUT SPL,R21
000004 ef40                      LDI R20,0xF0
000005 bb41                      OUT KEY_DDR,R20
                                 
                                 MAIN:
                                 ;DIRECTION ALL PINS
000006 9ad0                      SBI DDRA ,0 ;LCD_RS
000007 9ad1                      SBI DDRA ,1 ;LCD_RWPin
000008 9ad2                      SBI DDRA ,2 ;LCD_EnablePin
000009 9ad3                      SBI DDRA ,3 ;LED RED
00000a 9ad4                      SBI DDRA ,4 ;LED GREEN
00000b 9ad5                      SBI DDRA ,5 ;BUZZER
00000c 9ad6                      SBI DDRA ,6 ;MOTOR
00000d 9ad7                      SBI DDRA ,7 ;MOTOR
                                 
00000e 9ab8                      SBI DDRB ,0 ;LCD_D0
00000f 9ab9                      SBI DDRB ,1 ;LCD_D1
000010 9aba                      SBI DDRB ,2 ;LCD_D2
000011 9abb                      SBI DDRB ,3 ;LCD_D3
000012 9abc                      SBI DDRB ,4 ;LCD_D4
000013 9abd                      SBI DDRB ,5 ;LCD_D5
000014 9abe                      SBI DDRB ,6 ;LCD_D6
000015 9abf                      SBI DDRB ,7 ;LCD_D7
                                 
000016 9aa0                      SBI DDRC ,0 ;7SEG
000017 9aa1                      SBI DDRC ,1 ;7SEG
000018 9aa2                      SBI DDRC ,2 ;7SEG
000019 9aa3                      SBI DDRC ,3 ;7SEG
00001a 9aa4                      SBI DDRC ,4 ;7SEG
00001b 9aa5                      SBI DDRC ,5 ;7SEG
00001c 9aa6                      SBI DDRC ,6 ;7SEG
                                 ;*****************************************************
                                 
00001d 940e 0187                 CALL LCD_vInitialize
00001f 940e 0308                 CALL Seven_Segment_vInitialize
000021 940e 0181                 CALL initials_leds_motor_buzzer
                                 
000023 e415                      LDI R17 , 'E'
000024 940e 01af                 CALL LCD_vWriteChar
000026 e61e                      LDI R17 , 'n'
000027 940e 01af                 CALL LCD_vWriteChar
000029 e714                      LDI R17 , 't'
00002a 940e 01af                 CALL LCD_vWriteChar
00002c e615                      LDI R17 , 'e'
00002d 940e 01af                 CALL LCD_vWriteChar
00002f e712                      LDI R17 , 'r'
000030 940e 01af                 CALL LCD_vWriteChar
000032 e210                      LDI R17 , ' '
000033 940e 01af                 CALL LCD_vWriteChar
000035 e510                      LDI R17 , 'P'
000036 940e 01af                 CALL LCD_vWriteChar
000038 e611                      LDI R17 , 'a'
000039 940e 01af                 CALL LCD_vWriteChar
00003b e713                      LDI R17 , 's'
00003c 940e 01af                 CALL LCD_vWriteChar
00003e e713                      LDI R17 , 's'
00003f 940e 01af                 CALL LCD_vWriteChar
000041 e717                      LDI R17 , 'w'
000042 940e 01af                 CALL LCD_vWriteChar
000044 e61f                      LDI R17 , 'o'
000045 940e 01af                 CALL LCD_vWriteChar
000047 e712                      LDI R17 , 'r'
000048 940e 01af                 CALL LCD_vWriteChar
00004a e614                      LDI R17 , 'd'
00004b 940e 01af                 CALL LCD_vWriteChar
00004d 940e 039a                 CALL DELAY_1S
                                 
00004f e0a3                      LDI R26 , 3
                                 
                                 LOOP_MAIN:
000050 2f1a                      MOV R17 , R26
000051 940e 0317                 CALL Seven_Segment_function
                                 
000053 940e 0120                 CALL enter_pass
000055 940e 015e                 CALL check
                                 
000057 3091                      CPI R25 , 1 ;TRUE
000058 f059                      BREQ TRUE_CALL
000059 30a1                      CPI R26 , 1
00005a f011                      BREQ J
00005b 940e 0066                 CALL ENTER_AGAIN
                                 J:
00005d 95aa                      DEC R26
00005e f789                      BRNE LOOP_MAIN
                                 
00005f 2f1a                      MOV R17 , R26
000060 940e 0317                 CALL Seven_Segment_function
000062 940e 00a8                 CALL FINSH_PASS
                                 
                                 TRUE_CALL:
000064 940e 00fe                 CALL TRUE_PASS
                                 
                                 DONE_MAIN:
                                 
                                 ENTER_AGAIN:
000066 940e 01c4                 CALL DELAY_500MS
000068 940e 01a6                 CALL LCD_vWriteCommand_Fun_CLEAR
00006a e415                      LDI R17 , 'E'
00006b 940e 01af                 CALL LCD_vWriteChar
00006d e61e                      LDI R17 , 'n'
00006e 940e 01af                 CALL LCD_vWriteChar
000070 e714                      LDI R17 , 't'
000071 940e 01af                 CALL LCD_vWriteChar
000073 e615                      LDI R17 , 'e'
000074 940e 01af                 CALL LCD_vWriteChar
000076 e712                      LDI R17 , 'r'
000077 940e 01af                 CALL LCD_vWriteChar
000079 e210                      LDI R17 , ' '
00007a 940e 01af                 CALL LCD_vWriteChar
00007c e510                      LDI R17 , 'P'
00007d 940e 01af                 CALL LCD_vWriteChar
00007f e611                      LDI R17 , 'a'
000080 940e 01af                 CALL LCD_vWriteChar
000082 e713                      LDI R17 , 's'
000083 940e 01af                 CALL LCD_vWriteChar
000085 e713                      LDI R17 , 's'
000086 940e 01af                 CALL LCD_vWriteChar
000088 e717                      LDI R17 , 'w'
000089 940e 01af                 CALL LCD_vWriteChar
00008b e61f                      LDI R17 , 'o'
00008c 940e 01af                 CALL LCD_vWriteChar
00008e e712                      LDI R17 , 'r'
00008f 940e 01af                 CALL LCD_vWriteChar
000091 e614                      LDI R17 , 'd'
000092 940e 01af                 CALL LCD_vWriteChar
000094 940e 01b8                 CALL gotoXY
000096 e411                      LDI R17 , 'A'
000097 940e 01af                 CALL LCD_vWriteChar
000099 e617                      LDI R17 , 'g'
00009a 940e 01af                 CALL LCD_vWriteChar
00009c e611                      LDI R17 , 'a'
00009d 940e 01af                 CALL LCD_vWriteChar
00009f e619                      LDI R17 , 'i'
0000a0 940e 01af                 CALL LCD_vWriteChar
0000a2 e61e                      LDI R17 , 'n'
0000a3 940e 01af                 CALL LCD_vWriteChar
0000a5 940e 01c4                 CALL DELAY_500MS
0000a7 9508                      RET
                                 
                                 FINSH_PASS:
0000a8 940e 01c4                 CALL DELAY_500MS
0000aa 940e 01a6                 CALL LCD_vWriteCommand_Fun_CLEAR
0000ac e519                      LDI R17 , 'Y'
0000ad 940e 01af                 CALL LCD_vWriteChar
0000af e61f                      LDI R17 , 'o'
0000b0 940e 01af                 CALL LCD_vWriteChar
0000b2 e715                      LDI R17 , 'u'
0000b3 940e 01af                 CALL LCD_vWriteChar
0000b5 e712                      LDI R17 , 'r'
0000b6 940e 01af                 CALL LCD_vWriteChar
0000b8 e210                      LDI R17 , ' '
0000b9 940e 01af                 CALL LCD_vWriteChar
0000bb e611                      LDI R17 , 'a'
0000bc 940e 01af                 CALL LCD_vWriteChar
0000be e714                      LDI R17 , 't'
0000bf 940e 01af                 CALL LCD_vWriteChar
0000c1 e714                      LDI R17 , 't'
0000c2 940e 01af                 CALL LCD_vWriteChar
0000c4 e615                      LDI R17 , 'e'
0000c5 940e 01af                 CALL LCD_vWriteChar
0000c7 e61d                      LDI R17 , 'm'
0000c8 940e 01af                 CALL LCD_vWriteChar
0000ca e710                      LDI R17 , 'p'
0000cb 940e 01af                 CALL LCD_vWriteChar
0000cd e714                      LDI R17 , 't'
0000ce 940e 01af                 CALL LCD_vWriteChar
0000d0 940e 01b8                 CALL gotoXY
0000d2 e618                      LDI R17 , 'h'
0000d3 940e 01af                 CALL LCD_vWriteChar
0000d5 e611                      LDI R17 , 'a'
0000d6 940e 01af                 CALL LCD_vWriteChar
0000d8 e713                      LDI R17 , 's'
0000d9 940e 01af                 CALL LCD_vWriteChar
0000db e210                      LDI R17 , ' '
0000dc 940e 01af                 CALL LCD_vWriteChar
0000de e415                      LDI R17 , 'E'
0000df 940e 01af                 CALL LCD_vWriteChar
0000e1 e718                      LDI R17 , 'x'
0000e2 940e 01af                 CALL LCD_vWriteChar
0000e4 e710                      LDI R17 , 'p'
0000e5 940e 01af                 CALL LCD_vWriteChar
0000e7 e619                      LDI R17 , 'i'
0000e8 940e 01af                 CALL LCD_vWriteChar
0000ea e712                      LDI R17 , 'r'
0000eb 940e 01af                 CALL LCD_vWriteChar
0000ed e615                      LDI R17 , 'e'
0000ee 940e 01af                 CALL LCD_vWriteChar
0000f0 e614                      LDI R17 , 'd'
0000f1 940e 01af                 CALL LCD_vWriteChar
                                 RED_BUZZER:
0000f3 9adb                      SBI PORTA ,3 ;LED RED
0000f4 9add                      SBI PORTA ,5 ;BUZZER
0000f5 940e 01c4                 CALL DELAY_500MS
0000f7 98db                      CBI PORTA ,3 ;LED RED
0000f8 940e 01c4                 CALL DELAY_500MS
0000fa cff8                      RJMP RED_BUZZER
0000fb 940c 011f                 JMP HERE
0000fd 9508                      RET
                                 
0000fe 940e 01a6                 TRUE_PASS:CALL LCD_vWriteCommand_Fun_CLEAR
000100 e413                      LDI R17 , 'C'
000101 940e 01af                 CALL LCD_vWriteChar
000103 e61f                      LDI R17 , 'o'
000104 940e 01af                 CALL LCD_vWriteChar
000106 e712                      LDI R17 , 'r'
000107 940e 01af                 CALL LCD_vWriteChar
000109 e712                      LDI R17 , 'r'
00010a 940e 01af                 CALL LCD_vWriteChar
00010c e615                      LDI R17 , 'e'
00010d 940e 01af                 CALL LCD_vWriteChar
00010f e613                      LDI R17 , 'c'
000110 940e 01af                 CALL LCD_vWriteChar
000112 e714                      LDI R17 , 't'
000113 940e 01af                 CALL LCD_vWriteChar
000115 9adc                      SBI PORTA ,4 ;LED GREEN 
000116 9ade                      SBI PORTA ,6 ;MOTOR
000117 98df                      CBI PORTA ,7 ;MOTOR
000118 940e 01c4                 CALL DELAY_500MS
00011a 98de                      CBI PORTA ,6 ;MOTOR
00011b 98df                      CBI PORTA ,7 ;MOTOR
00011c 9adc                      SBI PORTA ,4 ;LED GREEN
00011d c001                      RJMP HERE
00011e 9508                      RET
                                 
                                 HERE:
                                 
00011f cfff                      RJMP HERE
                                 ;***********************************************************************
                                 ;***********************************************************************
                                 ;***********************************************************************
                                 ;***********************************************************************
                                 ;***********************************************************************
                                 ;***********************************************************************
                                 enter_pass:
000120 940e 01a6                 CALL LCD_vWriteCommand_Fun_CLEAR
000122 e070                      LDI R23 , 0 ; COUNTER OF NUMBERS OF PASS ENTERED
                                 
                                 ;1
000123 940e 01cf                 CALL KEYPAD
000125 3243                      CPI R20 , '#'
000126 f1a1                      BREQ CLEAR_BREAK
000127 2f04                      MOV R16 , R20
000128 9573                      INC R23
000129 2f14                      MOV R17 , R20
00012a 940e 01af                 CALL LCD_vWriteChar
                                 ;2
00012c 940e 01cf                 CALL KEYPAD
00012e 3243                      CPI R20 , '#'
00012f f159                      BREQ CLEAR_BREAK
000130 2fb4                      MOV R27 , R20
000131 9573                      INC R23
000132 2f14                      MOV R17 , R20
000133 940e 01af                 CALL LCD_vWriteChar
                                 ;3
000135 940e 01cf                 CALL KEYPAD
000137 3243                      CPI R20 , '#'
000138 f111                      BREQ CLEAR_BREAK
000139 2f64                      MOV R22 , R20
00013a 9573                      INC R23
00013b 2f14                      MOV R17 , R20
00013c 940e 01af                 CALL LCD_vWriteChar
                                 ;4
00013e 940e 01cf                 CALL KEYPAD
000140 3243                      CPI R20 , '#'
000141 f0c9                      BREQ CLEAR_BREAK
000142 2fc4                      MOV R28 , R20
000143 9573                      INC R23
000144 2f14                      MOV R17 , R20
000145 940e 01af                 CALL LCD_vWriteChar
                                 ;5
000147 940e 01cf                 CALL KEYPAD
000149 3243                      CPI R20 , '#'
00014a f081                      BREQ CLEAR_BREAK
00014b 2fd4                      MOV R29 , R20
00014c 9573                      INC R23
00014d 2f14                      MOV R17 , R20
00014e 940e 01af                 CALL LCD_vWriteChar
                                 
                                 LOOP_ENTER:
000150 940e 01cf                 CALL KEYPAD
000152 3243                      CPI R20 , '#'
000153 f039                      BREQ CLEAR_BREAK
000154 9573                      INC R23
000155 2f14                      MOV R17 , R20
000156 940e 01af                 CALL LCD_vWriteChar
000158 940c 0150                 JMP LOOP_ENTER
                                 
                                 DONE_LOOP_ENTERPASS:
                                 
00015a 9508                      RET
                                 CLEAR_BREAK:
00015b 940e 01a6                 CALL LCD_vWriteCommand_Fun_CLEAR
00015d cffc                      RJMP DONE_LOOP_ENTERPASS
                                 
                                 ;***********************************************************************
                                 ;***********************************************************************
                                 ;***********************************************************************
                                 ;***********************************************************************
                                 ;***********************************************************************
                                 ;***********************************************************************
                                 check:
                                 
00015e e085                      LDI R24 , 5 ;COUNTER OF NUMBERS 
00015f e090                      LDI R25 , 0 ;RETURN
000160 1778                      CP R23 , R24
000161 f461                      BRNE ERROR
                                 
                                 ;1
000162 3301                      CPI R16 , '1'
000163 f451                      BRNE ERROR
                                 ;2
000164 33b2                      CPI R27 , '2'
000165 f441                      BRNE ERROR
                                 ;3
000166 3363                      CPI R22 , '3'
000167 f431                      BRNE ERROR
                                 ;4
000168 33c4                      CPI R28 , '4'
000169 f421                      BRNE ERROR
                                 ;5
00016a 33d5                      CPI R29 , '5'
00016b f411                      BRNE ERROR
                                 
00016c e091                      LDI R25 , 1
                                 
                                 DONE_FUN_check:
00016d 9508                      RET
                                 
                                 ERROR:
00016e 940e 01a6                 CALL LCD_vWriteCommand_Fun_CLEAR
000170 e415                      LDI R17 , 'E'
000171 940e 01af                 CALL LCD_vWriteChar
000173 e512                      LDI R17 , 'R'
000174 940e 01af                 CALL LCD_vWriteChar
000176 e512                      LDI R17 , 'R'
000177 940e 01af                 CALL LCD_vWriteChar
000179 e41f                      LDI R17 , 'O'
00017a 940e 01af                 CALL LCD_vWriteChar
00017c e512                      LDI R17 , 'R'
00017d 940e 01af                 CALL LCD_vWriteChar
00017f e090                      LDI R25 , 0
000180 cfec                      RJMP DONE_FUN_check
                                 
                                 ;***********************************************************************
                                 ;***********************************************************************
                                 ;***********************************************************************
                                 ;***********************************************************************
                                 ;***********************************************************************
                                 ;***********************************************************************
                                 initials_leds_motor_buzzer:
000181 98db                      CBI Port_LED_M_B , 3 ; LED RED
000182 98dc                      CBI Port_LED_M_B , 4 ; LED GREEN
000183 98dd                      CBI Port_LED_M_B , 5 ; BUZZER
                                 ;MOTOR
000184 98de                      CBI Port_LED_M_B , 6
000185 98df                      CBI Port_LED_M_B , 7
000186 9508                      RET
                                 ;***********************************************************************
                                 ;***********************************************************************
                                 ;***********************************************************************
                                 ;***********************************************************************
                                 ;***********************************************************************
                                 ;***********************************************************************
                                 ;FUNCTION INITIALIZE LCD
                                 LCD_vInitialize :
                                 ;Diricton port data & control
000187 ef1f                      LDI R17 , 0XFF
000188 bb17                      OUT Port_Data_DDR , R17
000189 9ad0                      SBI Port_Control_DDR , 0
00018a 9ad1                      SBI Port_Control_DDR , 1
00018b 9ad2                      SBI Port_Control_DDR , 2
                                 ;delay 500 ms
00018c 940e 01c4                 CALL DELAY_500MS
                                 ;writeCommand 0011 1000
00018e e318                      LDI R17 , 0X38
00018f 940e 019e                 CALL LCD_vWriteCommand
                                 ;delay 2 ms
000191 940e 0216                 CALL DELAY_2MS
                                 ;writeCommand 0000 1100
000193 e01c                      LDI R17 , 0X0C
000194 940e 019e                 CALL LCD_vWriteCommand
                                 ;delay 2 ms
000196 940e 0216                 CALL DELAY_2MS
                                 ;writeCommand 0000 0001
000198 e011                      LDI R17 , 0X01
000199 940e 019e                 CALL LCD_vWriteCommand
                                 ;delay 2 ms
00019b 940e 01bc                 CALL DELAY_2MS_YARA
00019d 9508                      RET
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;FUNCTION WRITE COMMAND LCD
                                 LCD_vWriteCommand:
                                 ;RS control -> 0
00019e 98d8                      CBI Port_Control_PORT , LCD_RSPin
                                 ;RW control -> 0
00019f 98d9                      CBI Port_Control_PORT , LCD_RWPin
                                 ;Data output
0001a0 bb18                      OUT Port_Data_PORT , R17
                                 ;enable ->1
0001a1 9ada                      SBI Port_Control_PORT , LCD_EnablePin
                                 ;delay
0001a2 940e 01bc                 CALL DELAY_2MS_YARA
                                 ;disable ->0
0001a4 98da                      CBI Port_Control_PORT , LCD_EnablePin
                                 
0001a5 9508                      RET
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;FUNCTION CLEAR LCD
                                 LCD_vWriteCommand_Fun_CLEAR:
                                 ;RS control -> 0
0001a6 98d8                      CBI Port_Control_PORT , LCD_RSPin
                                 ;RW control -> 0
0001a7 98d9                      CBI Port_Control_PORT , LCD_RWPin
                                 ;Data output
0001a8 e011                      LDI R17 , 0X01
0001a9 bb18                      OUT Port_Data_PORT , R17
                                 ;enable ->1
0001aa 9ada                      SBI Port_Control_PORT , LCD_EnablePin
                                 ;delay
0001ab 940e 01bc                 CALL DELAY_2MS_YARA
                                 ;disable ->0
0001ad 98da                      CBI Port_Control_PORT , LCD_EnablePin
                                 
0001ae 9508                      RET
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;FUNCTION WRITE CHAR ON LCD
                                 LCD_vWriteChar:
                                 ;LDI R17 , '1'  ;EL CHAR IN R17
                                 ;RS control -> 1
0001af 9ad8                      SBI Port_Control_PORT , LCD_RSPin
                                 ;RW control -> 0
0001b0 98d9                      CBI Port_Control_PORT , LCD_RWPin
                                 ;Data output
0001b1 bb18                      OUT Port_Data_PORT , R17
                                 ;enable
0001b2 9ada                      SBI Port_Control_PORT , LCD_EnablePin
                                 ;delay
0001b3 940e 01bc                 CALL DELAY_2MS_YARA
                                 ;disable
0001b5 98da                      CBI Port_Control_PORT , LCD_EnablePin
0001b6 9508                      RET
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;FUNCTION WRITE STRING ON LCD
                                 LCD_vWriteString:
                                 ;LDI R17 , string
0001b7 9508                      RET
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;FUNCTION GO TO NEXT LINE
                                 gotoXY:
0001b8 ec10                      LDI R17 , 0XC0
0001b9 940e 019e                 CALL LCD_vWriteCommand
0001bb 9508                      RET
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ; FUN DELAY 2MS 
                                 DELAY_2MS_YARA:
0001bc ef2a                      LDI R18 , 250
                                 LOOP_DELAY_2MS1:
0001bd e130                      LDI R19 , 16
                                    LOOP_DELAY_2MS2:
0001be 0000                         NOP
0001bf 953a                         DEC R19 
0001c0 f7e9                         BRNE LOOP_DELAY_2MS2
0001c1 952a                      DEC R18
0001c2 f7d1                      BRNE LOOP_DELAY_2MS1
0001c3 9508                      RET
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;FUN DELAY 500MS
                                 DELAY_500MS:
0001c4 ef2a                      LDI R18 , 250
                                   LOOP_DELAY_500MS1:
0001c5 ef3a                        LDI R19 , 250
                                     LOOP_DELAY_500MS2:
0001c6 e140                          LDI R20 , 16
                                 	  LOOP_DELAY_500MS3:
0001c7 0000                      	  NOP
0001c8 954a                      	  DEC R20
0001c9 f7e9                      	  BRNE LOOP_DELAY_500MS3
0001ca 953a                      	DEC R19
0001cb f7d1                      	BRNE LOOP_DELAY_500MS2
0001cc 952a                       DEC R18
0001cd f7c9                       BRNE LOOP_DELAY_500MS3
0001ce 9508                      RET
                                 ;***********************************************************************
                                 ;***********************************************************************
                                 ;***********************************************************************
                                 ;***********************************************************************
                                 ;***********************************************************************
                                 KEYPAD:
                                 
                                 GROUND_ALL_ROWS:
0001cf e04f                      LDI R20,0x0F
0001d0 bb42                      OUT KEY_PORT,R20
                                 
                                 WAIT_FOR_RELEASE:
0001d1 0000                      NOP
0001d2 b350                      IN R21,KEY_PIN
0001d3 705f                      ANDI R21,0x0F
0001d4 305f                      CPI R21,0x0F
0001d5 f7d9                      BRNE WAIT_FOR_RELEASE
                                 
                                 WAIT_FOR_KEY:
0001d6 0000                      NOP
0001d7 b350                      IN R21,KEY_PIN
0001d8 705f                      ANDI R21,0x0F
0001d9 305f                      CPI R21,0x0F
0001da f3d9                      BREQ WAIT_FOR_KEY
0001db 940e 0221                 CALL WAIT15MS
0001dd b350                      IN R21,KEY_PIN
0001de 705f                      ANDI R21,0x0F
0001df 305f                      CPI R21,0x0F
0001e0 f3a9                      BREQ WAIT_FOR_KEY
0001e1 e75f                      LDI R21,0b01111111
0001e2 bb52                      OUT KEY_PORT,R21
0001e3 0000                      NOP
0001e4 b350                      IN R21,KEY_PIN
0001e5 705f                      ANDI R21,0x0F
0001e6 305f                      CPI R21,0x0F
0001e7 f4a9                      BRNE COL1
0001e8 eb5f                      LDI R21,0b10111111
0001e9 bb52                      OUT KEY_PORT,R21
0001ea 0000                      NOP
0001eb b350                      IN R21,KEY_PIN
0001ec 705f                      ANDI R21,0x0F
0001ed 305f                      CPI R21,0x0F
0001ee f489                      BRNE COL2
0001ef ed5f                      LDI R21,0b11011111
0001f0 bb52                      OUT KEY_PORT,R21
0001f1 0000                      NOP
0001f2 b350                      IN R21,KEY_PIN
0001f3 705f                      ANDI R21,0x0F
0001f4 305f                      CPI R21,0x0F
0001f5 f469                      BRNE COL3
0001f6 ee5f                      LDI R21,0b11101111
0001f7 bb52                      OUT KEY_PORT,R21
0001f8 0000                      NOP
0001f9 b350                      IN R21,KEY_PIN
0001fa 705f                      ANDI R21,0x0F
0001fb 305f                      CPI R21,0x0F
0001fc f449                      BRNE COL4
                                 
                                 COL1:
0001fd e0e0                      LDI R30,LOW(KCODE0<<1)
0001fe e0f6                      LDI R31,HIGH(KCODE0<<1)
0001ff c009                      RJMP FIND
                                 COL2:
000200 e0e4                      LDI R30,LOW(KCODE1<<1)
000201 e0f6                      LDI R31,HIGH(KCODE1<<1)
000202 c006                      RJMP FIND
                                 COL3:
000203 e0e8                      LDI R30,LOW(KCODE2<<1)
000204 e0f6                      LDI R31,HIGH(KCODE2<<1)
000205 c003                      RJMP FIND
                                 COL4:
000206 e0ec                      LDI R30,LOW(KCODE3<<1)
000207 e0f6                      LDI R31,HIGH(KCODE3<<1)
000208 c000                      RJMP FIND
                                 
                                 FIND:
000209 9556                      LSR R21
00020a f410                      BRCC MATCH
00020b 9145                      LPM R20,Z+
00020c cffc                      RJMP FIND
                                 MATCH:
00020d 9144                      LPM R20,Z
                                 ;MOV R16,R20
                                 ;OUT PORTA,R20
00020e 9508                      RET
                                 ;************************************************************************************
00020f 0000                      SDELAY: NOP
000210 0000                      NOP
000211 0000                      NOP
000212 0000                      NOP
000213 0000                      NOP
000214 0000                      NOP
000215 9508                      RET
                                 ;************************************************************************************
                                 DELAY_2MS:
000216 930f                      PUSH R16
000217 932f                      PUSH R18
000218 e604                      LDI R16,100
000219 ea20                      LOOP1: LDI R18,160
00021a 952a                      LOOP0: DEC R18
00021b f7f1                      BRNE LOOP0
00021c 950a                      DEC R16
00021d f7d9                      BRNE LOOP1
00021e 912f                      POP R18
00021f 910f                      POP R16
000220 9508                      RET
                                 
                                 WAIT15MS:
000221 934f                      PUSH R20
000222 935f                      PUSH R21
000223 ef5f                      LDI R21,0xFF
000224 ef4f                      LOOP3:LDI R20,0xFF
000225 954a                      LOOP2: DEC R20
000226 f7f1                      BRNE LOOP2
000227 955a                      DEC R21
000228 f7d9                      BRNE LOOP3
000229 915f                      POP R21
00022a 914f                      POP R20
00022b 9508                      RET
                                 
                                 .ORG 0x300
000300 4241
000301 4443                      KCODE0: .DB 'A','B','C','D'
000302 3633
000303 2339                      KCODE1: .DB '3','6','9','#'
000304 3532
000305 3038                      KCODE2: .DB '2','5','8','0'
000306 3431
000307 2a37                      KCODE3: .DB '1','4','7','*'
                                 ;***********************************************************************
                                 ;***********************************************************************
                                 ;***********************************************************************
                                 ;***********************************************************************
                                 ;***********************************************************************
                                 ;FUNCTION INITIALIZE
                                 Seven_Segment_vInitialize :
                                 ;Directon port
000308 9aa0                      SBI Port_7segment_DDR , 0
000309 9aa1                      SBI Port_7segment_DDR , 1
00030a 9aa2                      SBI Port_7segment_DDR , 2
00030b 9aa3                      SBI Port_7segment_DDR , 3
00030c 9aa4                      SBI Port_7segment_DDR , 4
00030d 9aa5                      SBI Port_7segment_DDR , 5
00030e 9aa6                      SBI Port_7segment_DDR , 6
                                 ;INITIAL CASE
00030f 9aa8                      SBI Port_7segment_PORT , 0
000310 9aa9                      SBI Port_7segment_PORT , 1
000311 9aaa                      SBI Port_7segment_PORT , 2
000312 9aab                      SBI Port_7segment_PORT , 3
000313 9aac                      SBI Port_7segment_PORT , 4
000314 9aad                      SBI Port_7segment_PORT , 5
000315 9aae                      SBI Port_7segment_PORT , 6
000316 9508                      RET
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;function seve
                                 Seven_Segment_function:
000317 e029                      LDI R18 , 9
000318 1721                      CP R18 ,R17
000319 f0d9                      BREQ NUM_9
00031a e028                      LDI R18 , 8
00031b 1721                      CP R18 ,R17
00031c f0c9                      BREQ NUM_8
00031d e027                      LDI R18 , 7
00031e 1721                      CP R18 ,R17
00031f f0b9                      BREQ NUM_7
000320 e026                      LDI R18 , 6
000321 1721                      CP R18 ,R17
000322 f0a9                      BREQ NUM_6
000323 e025                      LDI R18 , 5
000324 1721                      CP R18 ,R17
000325 f099                      BREQ NUM_5
000326 e024                      LDI R18 , 4
000327 1721                      CP R18 ,R17
000328 f089                      BREQ NUM_4
000329 e023                      LDI R18 , 3
00032a 1721                      CP R18 ,R17
00032b f079                      BREQ NUM_3
00032c e022                      LDI R18 , 2
00032d 1721                      CP R18 ,R17
00032e f069                      BREQ NUM_2
00032f e021                      LDI R18 , 1
000330 1721                      CP R18 ,R17
000331 f059                      BREQ NUM_1
000332 e020                      LDI R18 , 0
000333 1721                      CP R18 ,R17
000334 f049                      BREQ NUM_0
                                 ;;;;;;;;;;;;;;;;;;
000335 c009                      NUM_9: RJMP CALL_NUM_9
000336 c011                      NUM_8: RJMP CALL_NUM_8
000337 c019                      NUM_7: RJMP CALL_NUM_7
000338 c021                      NUM_6: RJMP CALL_NUM_6
000339 c029                      NUM_5: RJMP CALL_NUM_5
00033a c031                      NUM_4: RJMP CALL_NUM_4
00033b c039                      NUM_3: RJMP CALL_NUM_3
00033c c041                      NUM_2: RJMP CALL_NUM_2
00033d c049                      NUM_1: RJMP CALL_NUM_1
00033e c051                      NUM_0: RJMP CALL_NUM_0
                                 ;IF NUMBER=9
                                 CALL_NUM_9:
00033f 98a8                      CBI Port_7segment_PORT , 0
000340 98a9                      CBI Port_7segment_PORT , 1
000341 98aa                      CBI Port_7segment_PORT , 2
000342 98ab                      CBI Port_7segment_PORT , 3
000343 98ad                      CBI Port_7segment_PORT , 5
000344 98ae                      CBI Port_7segment_PORT , 6
000345 9aac                      SBI Port_7segment_PORT , 4
000346 940c 0399                 JMP DONE_7SEGMENT_FUN
                                 ;IF NUMBER = 8
                                 CALL_NUM_8:
000348 98a8                      CBI Port_7segment_PORT , 0
000349 98a9                      CBI Port_7segment_PORT , 1
00034a 98aa                      CBI Port_7segment_PORT , 2
00034b 98ab                      CBI Port_7segment_PORT , 3
00034c 98ac                      CBI Port_7segment_PORT , 4
00034d 98ad                      CBI Port_7segment_PORT , 5
00034e 98ae                      CBI Port_7segment_PORT , 6
00034f 940c 0399                 JMP DONE_7SEGMENT_FUN
                                 ;IF NUMBER = 7
                                 CALL_NUM_7:
000351 98a8                      CBI Port_7segment_PORT , 0
000352 98a9                      CBI Port_7segment_PORT , 1
000353 98aa                      CBI Port_7segment_PORT , 2
000354 9aab                      SBI Port_7segment_PORT , 3
000355 9aac                      SBI Port_7segment_PORT , 4
000356 9aad                      SBI Port_7segment_PORT , 5
000357 9aae                      SBI Port_7segment_PORT , 6
000358 940c 0399                 JMP DONE_7SEGMENT_FUN
                                 ;IF NUMBER = 6
                                 CALL_NUM_6:
00035a 98a8                      CBI Port_7segment_PORT , 0
00035b 98ad                      CBI Port_7segment_PORT , 5
00035c 98ac                      CBI Port_7segment_PORT , 4
00035d 98ab                      CBI Port_7segment_PORT , 3
00035e 98aa                      CBI Port_7segment_PORT , 2
00035f 98ae                      CBI Port_7segment_PORT , 6
000360 9aa9                      SBI Port_7segment_PORT , 1
000361 940c 0399                 JMP DONE_7SEGMENT_FUN
                                 ;IF NUMBER = 5
                                 CALL_NUM_5:
000363 98a8                      CBI Port_7segment_PORT , 0
000364 98ad                      CBI Port_7segment_PORT , 5
000365 98ae                      CBI Port_7segment_PORT , 6
000366 98aa                      CBI Port_7segment_PORT , 2
000367 98ab                      CBI Port_7segment_PORT , 3
000368 9aa9                      SBI Port_7segment_PORT , 1
000369 9aac                      SBI Port_7segment_PORT , 4
00036a 940c 0399                 JMP DONE_7SEGMENT_FUN
                                 ;IF NUMBER = 4
                                 CALL_NUM_4:
00036c 98ad                      CBI Port_7segment_PORT , 5
00036d 98ae                      CBI Port_7segment_PORT , 6
00036e 98a9                      CBI Port_7segment_PORT , 1
00036f 98aa                      CBI Port_7segment_PORT , 2
000370 9aa8                      SBI Port_7segment_PORT , 0
000371 9aac                      SBI Port_7segment_PORT , 4
000372 9aab                      SBI Port_7segment_PORT , 3
000373 940c 0399                 JMP DONE_7SEGMENT_FUN
                                 ;IF NUMBER = 3
                                 CALL_NUM_3:
000375 98a8                      CBI Port_7segment_PORT , 0
000376 98a9                      CBI Port_7segment_PORT , 1
000377 98ae                      CBI Port_7segment_PORT , 6
000378 98aa                      CBI Port_7segment_PORT , 2
000379 98ab                      CBI Port_7segment_PORT , 3
00037a 9aad                      SBI Port_7segment_PORT , 5
00037b 9aac                      SBI Port_7segment_PORT , 4
00037c 940c 0399                 JMP DONE_7SEGMENT_FUN
                                 ;IF NUMBER = 2
                                 CALL_NUM_2:
00037e 98a8                      CBI Port_7segment_PORT , 0
00037f 98a9                      CBI Port_7segment_PORT , 1
000380 98ae                      CBI Port_7segment_PORT , 6
000381 98ac                      CBI Port_7segment_PORT , 4
000382 98ab                      CBI Port_7segment_PORT , 3
000383 9aad                      SBI Port_7segment_PORT , 5
000384 9aaa                      SBI Port_7segment_PORT , 2
000385 940c 0399                 JMP DONE_7SEGMENT_FUN
                                 ;IF NUMBER = 1
                                 CALL_NUM_1:
000387 98a9                      CBI Port_7segment_PORT , 1
000388 98aa                      CBI Port_7segment_PORT , 2
000389 9aa8                      SBI Port_7segment_PORT , 0
00038a 9aab                      SBI Port_7segment_PORT , 3
00038b 9aac                      SBI Port_7segment_PORT , 4
00038c 9aad                      SBI Port_7segment_PORT , 5
00038d 9aae                      SBI Port_7segment_PORT , 6
00038e 940c 0399                 JMP DONE_7SEGMENT_FUN
                                 ;IF NUMBER = 0
                                 CALL_NUM_0:
000390 98a8                      CBI Port_7segment_PORT , 0
000391 98a9                      CBI Port_7segment_PORT , 1
000392 98aa                      CBI Port_7segment_PORT , 2
000393 98ab                      CBI Port_7segment_PORT , 3
000394 98ac                      CBI Port_7segment_PORT , 4
000395 98ad                      CBI Port_7segment_PORT , 5
000396 9aae                      SBI Port_7segment_PORT , 6
000397 940c 0399                 JMP DONE_7SEGMENT_FUN
                                 
                                 DONE_7SEGMENT_FUN:
000399 9508                      RET
                                 ;***********************************************************************
                                 ;***********************************************************************
                                 ;***********************************************************************
                                 ;***********************************************************************
                                 ;***********************************************************************
                                 DELAY_1S:
00039a ef2f                      LDI R18 , 255
                                   LOOP_DELAY_1S1:
00039b ef3f                        LDI R19 , 255
                                     LOOP_DELAY_1S2:
00039c e74b                          LDI R20 , 123
                                 	  LOOP_DELAY_1S3:
00039d 0000                      	  NOP
00039e 954a                      	  DEC R20
00039f f7e9                      	  BRNE LOOP_DELAY_1S3
0003a0 953a                      	DEC R19
0003a1 f7d1                      	BRNE LOOP_DELAY_1S2
0003a2 952a                       DEC R18
0003a3 f7c9                       BRNE LOOP_DELAY_1S3
0003a4 9508                      RET


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega32" register use summary:
x  :   0 y  :   0 z  :   2 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:   6 r17:  96 r18:  30 r19:   6 r20:  31 
r21:  38 r22:   2 r23:   8 r24:   2 r25:   4 r26:   5 r27:   2 r28:   2 
r29:   2 r30:   4 r31:   4 
Registers used: 17 out of 35 (48.6%)

"ATmega32" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   0 adiw  :   0 and   :   0 
andi  :   7 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   1 brcs  :   0 break :   0 breq  :  20 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :  24 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  : 117 cbi   :  66 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   0 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :  11 cpc   :   0 
cpi   :  20 cpse  :   0 dec   :  13 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   7 inc   :   6 jmp   :  12 
ld    :   0 ldd   :   0 ldi   : 118 lds   :   0 lpm   :   3 lsl   :   0 
lsr   :   1 mov   :  13 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :  15 or    :   0 ori   :   0 out   :  12 pop   :   4 
push  :   4 rcall :   0 ret   :  21 reti  :   0 rjmp  :  20 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :  70 sbic  :   0 sbis  :   0 
sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 
sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 sts   :   0 
sub   :   0 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 23 out of 113 (20.4%)

"ATmega32" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00074a   1426     16   1442   32768   4.4%
[.dseg] 0x000060 0x000060      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
